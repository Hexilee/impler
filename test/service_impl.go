/*
Implement of test.Service
This file is generated by github.com/Hexilee/impler at 2018-10-13 20:33:36.385358 +0800 CST m=+0.587467193
DON'T EDIT IT!
*/

package test

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"time"
)

func NewService() Service {
	service := &serviceImpl{
		baseUrl: "https://box.zjuqsc.com/item",
		cookies: make([]*http.Cookie, 0),
		header:  make(http.Header),
	}
	service.header.Add("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36")
	service.cookies = append(service.cookies, &http.Cookie{
		Name:  "ga",
		Value: "bb78137vt73817ynyh89",
	})
	service.cookies = append(service.cookies, &http.Cookie{
		Name:  "qsc_session",
		Value: "secure_7y7y1n570y",
	})
	return service
}

type serviceImpl struct {
	baseUrl string
	header  http.Header
	cookies []*http.Cookie
}

func (service serviceImpl) UploadItem(path string, contentType string, cookie string) (genResult *http.Response, genErr error) {
	genUri := "/upload"
	return
}
func (service serviceImpl) GetItem(token int, page int, limit int) (genResult *http.Response, genErr error) {
	genUri := fmt.Sprintf("/get/%d?page=%d&limit=%d", token, page, limit)
	return
}
func (service serviceImpl) PostInfo(id int, firstName string) (genResult *http.Request, genErr error) {
	genUri := "/"
	genDataMap := make(url.Values)
	genDataMap.Add("name", fmt.Sprintf("%s.Lee", firstName))
	genDataMap.Add("id", fmt.Sprintf("%d", id))
	genBody := bytes.NewBufferString(genDataMap.Encode())
	return
}
func (service serviceImpl) StatByReader(id int, body io.Reader) (genResult *http.Response, genErr error) {
	genUri := fmt.Sprintf("/stat/%d", id)
	genBody := body
	return
}
func (service serviceImpl) StatItem(id int, body *StatBody) (genResult *http.Response, genErr error) {
	genUri := fmt.Sprintf("/stat/%d", id)
	var genData []byte
	genData, genErr = json.Marshal(body)
	if genErr != nil {
		return
	}
	genBody := bytes.NewBuffer(genData)
	return
}
func (service serviceImpl) UpdateItem(id int, cookie string, data *time.Time, apiKey string) (genResult *UploadResult, genStatusCode int, genErr error) {
	genUri := fmt.Sprintf("/change/%d", id)
	var genData []byte
	genDataMap := make(map[string]interface{})
	genDataMap["data"] = data
	genDataMap["apiKey"] = apiKey
	genData, genErr = json.Marshal(genDataMap)
	if genErr != nil {
		return
	}
	genBody := bytes.NewBuffer(genData)
	return
}
